'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class Calendar {
  constructor({ startDate = null, endDate = null, siblingMonths = false, weekNumbers = false, weekStart = 0 } = {}) {
    this.startDate = startDate;
    this.endDate = endDate;
    this.siblingMonths = siblingMonths;
    this.weekNumbers = weekNumbers;
    this.weekStart = weekStart;
  }
  getCalendar(year, month) {
    const date = new Date(Date.UTC(year, month, 1, 0, 0, 0, 0));
    year = date.getUTCFullYear();
    month = date.getUTCMonth();
    const calendar = [];
    const firstDay = date.getUTCDay();
    const firstDate = -((7 - this.weekStart + firstDay) % 7);
    const lastDate = Calendar.daysInMonth(year, month);
    const lastDay = (lastDate - firstDate) % 7;
    const lastDatePreviousMonth = Calendar.daysInMonth(year, month - 1);
    let i = firstDate;
    let currentDay;
    let currentDate;
    let currentDateObject = false;
    let currentWeekNumber = null;
    let otherMonth;
    let otherYear;
    const max = lastDate - i + (lastDay !== 0 ? 7 - lastDay : 0) + firstDate;
    while (i < max) {
      currentDate = i + 1;
      currentDay = ((i < 1 ? 7 + i : i) + firstDay) % 7;
      if (currentDate < 1 || currentDate > lastDate) {
        if (this.siblingMonths) {
          if (currentDate < 1) {
            otherMonth = month - 1;
            otherYear = year;
            if (otherMonth < 0) {
              otherMonth = 11;
              otherYear--;
            }
            currentDate = lastDatePreviousMonth + currentDate;
          } else if (currentDate > lastDate) {
            otherMonth = month + 1;
            otherYear = year;
            if (otherMonth > 11) {
              otherMonth = 0;
              otherYear++;
            }
            currentDate = i - lastDate + 1;
          }
          if (otherMonth !== void 0 && otherYear !== void 0) {
            currentDateObject = {
              day: currentDate,
              weekDay: currentDay,
              month: otherMonth,
              year: otherYear,
              siblingMonth: true
            };
          }
        } else {
          currentDateObject = false;
        }
      } else {
        currentDateObject = {
          day: currentDate,
          weekDay: currentDay,
          month,
          year
        };
      }
      if (currentDateObject && this.weekNumbers) {
        if (currentWeekNumber === null) {
          currentWeekNumber = Calendar.calculateWeekNumber(currentDateObject);
        } else if (currentDay === 1 && currentWeekNumber === 52) {
          currentWeekNumber = 1;
        } else if (currentDay === 1) {
          currentWeekNumber++;
        }
        currentDateObject.weekNumber = currentWeekNumber;
      }
      if (currentDateObject && this.startDate) {
        currentDateObject.selected = this.isDateSelected(currentDateObject);
      }
      calendar.push(currentDateObject);
      i++;
    }
    return calendar;
  }
  isDateSelected(date) {
    if (!this.startDate) {
      return false;
    }
    if (date.year === this.startDate.year && date.month === this.startDate.month && date.day === this.startDate.day) {
      return true;
    }
    if (!this.endDate) {
      return false;
    }
    if (date.year === this.startDate.year && date.month === this.startDate.month && date.day < this.startDate.day) {
      return false;
    }
    if (date.year === this.endDate.year && date.month === this.endDate.month && date.day > this.endDate.day) {
      return false;
    }
    if (date.year === this.startDate.year && date.month < this.startDate.month) {
      return false;
    }
    if (date.year === this.endDate.year && date.month > this.endDate.month) {
      return false;
    }
    if (date.year < this.startDate.year) {
      return false;
    }
    if (date.year > this.endDate.year) {
      return false;
    }
    return true;
  }
  setStartDate(date) {
    this.startDate = date;
  }
  setEndDate(date) {
    this.endDate = date;
  }
  setDate(date) {
    return this.setStartDate(date);
  }
  static diff(dateLeft, dateRight) {
    const dateLeftDate = new Date(Date.UTC(dateLeft.year, dateLeft.month, dateLeft.day, 0, 0, 0, 0));
    const dateRightDate = new Date(Date.UTC(dateRight.year, dateRight.month, dateRight.day, 0, 0, 0, 0));
    return Math.ceil((dateLeftDate.getTime() - dateRightDate.getTime()) / 864e5);
  }
  static interval(dateLeft, dateRight) {
    return Math.abs(Calendar.diff(dateLeft, dateRight)) + 1;
  }
  static compare(dateLeft, dateRight) {
    if (typeof dateLeft !== "object" || typeof dateRight !== "object" || dateLeft === null || dateRight === null) {
      throw new TypeError("dates must be objects");
    }
    if (dateLeft.year < dateRight.year) {
      return -1;
    }
    if (dateLeft.year > dateRight.year) {
      return 1;
    }
    if (dateLeft.month < dateRight.month) {
      return -1;
    }
    if (dateLeft.month > dateRight.month) {
      return 1;
    }
    if (dateLeft.day < dateRight.day) {
      return -1;
    }
    if (dateLeft.day > dateRight.day) {
      return 1;
    }
    return 0;
  }
  static daysInMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
  }
  static isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  }
  static calculateWeekNumber(date) {
    const current = new Date(Date.UTC(date.year, date.month, date.day, 0, 0, 0, 0));
    const target = new Date(current.valueOf());
    const dayNr = (current.getUTCDay() + 6) % 7;
    target.setUTCDate(target.getUTCDate() - dayNr + 3);
    const firstThursday = target.valueOf();
    target.setUTCMonth(0, 1);
    if (target.getUTCDay() !== 4) {
      target.setUTCMonth(0, 1 + (4 - target.getUTCDay() + 7) % 7);
    }
    return 1 + Math.ceil((firstThursday - target.getTime()) / 6048e5);
  }
}

exports.Calendar = Calendar;
//# sourceMappingURL=index.js.map
